USE funky_db;
GO
/*
 * =========================================================================
 * Funky Test Data Generator Script
 * =========================================================================
 *
 * Description:
 * This SQL script generates random test data for the 'funky_db' database,
 * populating the 'person', 'address', and 'person_address' tables with
 * realistic, varied data for testing purposes. It is designed to create a
 * large, representative dataset to simulate real-world scenarios while
 * maintaining performance and randomness.
 *
 * Key Features:
 * 1. Persons (5,000 Rows):
 * - Generates 5,000 person records with 60% common first and last names
 * (e.g., James Smith, Mary Johnson) drawn from the top U.S. name popularity,
 * and 40% less common names (e.g., Ledger Azariah, April Izabella) from lower
 * popularity ranks.
 * - First names are gender-specific.
 * - Includes random birthdates (up to 60 years in the past), genders
 * (Male/Female), middle initials (50% chance of a random letter A-Z), and unique identifiers.
 *
 * 2. Addresses (5,000 Rows):
 * - Creates 5,000 address records with a wide variety of street names
 * (e.g., Main St, Maple Ave, Oak Blvd), randomized house numbers
 * (between 100 and 9,999), and optional apartment numbers (50% chance, Apt 1-100).
 * - Includes diverse U.S. cities (e.g., New York, Los Angeles), state
 * codes (e.g., NY, CA), and randomized postal codes for realism.
 * - Sets is_primary flag based on assignment to persons.
 *
 * 3. Person-Address Links (5,000 Rows):
 * - Assigns addresses such that approximately one-third of persons have no address,
 * one-third have one address (is_primary=1), and one-third have two addresses
 * (first is_primary=1, second is_primary=0).
 * - Ensures unique addresses per assignment (no sharing) and proper linking through person_address.
 *
 * Performance Notes:
 * - The script prioritizes speed of execution, using bulk inserts, table
 * variables, and optimized random sampling to minimize I/O and locking.
 * - Readability is maintained through clear section delimiters, comments,
 * and logical structuring, making it easy for developers to understand
 * and maintain.
 *
 * Usage:
 * Run this script in the 'funky_db' database to populate the tables with
 * test data. Ensure the 'person', 'address', and 'person_address' tables
 * exist with the appropriate schema (including foreign key constraints).
 *
 * Author: Comment block generated by xAI's Grok 4
 * Date: August 20, 2025
 *
 * =========================================================================
 */
-- PERSON INSERTS:
-- Insert into person table (5,000 rows, 60% common names, 40% less common names)
DECLARE @PersonCounter INT = 0;
WHILE @PersonCounter < 5000
BEGIN
    DECLARE @gender NVARCHAR(10) = CASE WHEN ABS(CHECKSUM(NEWID())) % 2 = 0 THEN 'Male' ELSE 'Female' END;
    DECLARE @IsCommonName BIT = CASE WHEN ABS(CHECKSUM(NEWID())) % 10 < 6 THEN 1 ELSE 0 END;
    DECLARE @rand_first INT = ABS(CHECKSUM(NEWID())) % 50;
    DECLARE @rand_last INT = ABS(CHECKSUM(NEWID())) % 50;
    DEClARE @city_state_randomizer int;
    select @city_state_randomizer = ABS(CHECKSUM(NEWID()) % 10);
    DECLARE @first_name NVARCHAR(100) = CASE
        WHEN @gender = 'Male' AND @IsCommonName = 1 THEN CASE @rand_first
            WHEN 0 THEN 'James' WHEN 1 THEN 'Robert' WHEN 2 THEN 'John' WHEN 3 THEN 'Michael' WHEN 4 THEN 'David'
            WHEN 5 THEN 'William' WHEN 6 THEN 'Richard' WHEN 7 THEN 'Joseph' WHEN 8 THEN 'Thomas' WHEN 9 THEN 'Daniel'
            WHEN 10 THEN 'Charles' WHEN 11 THEN 'Christopher' WHEN 12 THEN 'Matthew' WHEN 13 THEN 'Anthony' WHEN 14 THEN 'Mark'
            WHEN 15 THEN 'Donald' WHEN 16 THEN 'Steven' WHEN 17 THEN 'Paul' WHEN 18 THEN 'Andrew' WHEN 19 THEN 'Joshua'
            WHEN 20 THEN 'Kenneth' WHEN 21 THEN 'Kevin' WHEN 22 THEN 'Brian' WHEN 23 THEN 'George' WHEN 24 THEN 'Timothy'
            WHEN 25 THEN 'Ronald' WHEN 26 THEN 'Jason' WHEN 27 THEN 'Edward' WHEN 28 THEN 'Jeffrey' WHEN 29 THEN 'Ryan'
            WHEN 30 THEN 'Jacob' WHEN 31 THEN 'Gary' WHEN 32 THEN 'Nicholas' WHEN 33 THEN 'Eric' WHEN 34 THEN 'Jonathan'
            WHEN 35 THEN 'Stephen' WHEN 36 THEN 'Larry' WHEN 37 THEN 'Justin' WHEN 38 THEN 'Scott' WHEN 39 THEN 'Brandon'
            WHEN 40 THEN 'Benjamin' WHEN 41 THEN 'Samuel' WHEN 42 THEN 'Gregory' WHEN 43 THEN 'Alexander' WHEN 44 THEN 'Frank'
            WHEN 45 THEN 'Patrick' WHEN 46 THEN 'Raymond' WHEN 47 THEN 'Jack' WHEN 48 THEN 'Dennis' WHEN 49 THEN 'Jerry'
        END
        WHEN @gender = 'Male' AND @IsCommonName = 0 THEN CASE @rand_first
            WHEN 0 THEN 'Ledger' WHEN 1 THEN 'Azariah' WHEN 2 THEN 'Donovan' WHEN 3 THEN 'Moses' WHEN 4 THEN 'Kaizen'
            WHEN 5 THEN 'Elio' WHEN 6 THEN 'Leonidas' WHEN 7 THEN 'Lawrence' WHEN 8 THEN 'Tripp' WHEN 9 THEN 'Ariel'
            WHEN 10 THEN 'Alonzo' WHEN 11 THEN 'Kaison' WHEN 12 THEN 'Lian' WHEN 13 THEN 'Devin' WHEN 14 THEN 'Rio'
            WHEN 15 THEN 'Johnathan' WHEN 16 THEN 'Ayaan' WHEN 17 THEN 'Gunner' WHEN 18 THEN 'Jeffrey' WHEN 19 THEN 'Philip'
            WHEN 20 THEN 'Samson' WHEN 21 THEN 'Moises' WHEN 22 THEN 'Lucca' WHEN 23 THEN 'Musa' WHEN 24 THEN 'Camilo'
            WHEN 25 THEN 'Hamza' WHEN 26 THEN 'Ridge' WHEN 27 THEN 'Kolton' WHEN 28 THEN 'Morgan' WHEN 29 THEN 'Troy'
            WHEN 30 THEN 'Kylan' WHEN 31 THEN 'Amiri' WHEN 32 THEN 'Boone' WHEN 33 THEN 'Makai' WHEN 34 THEN 'Johan'
            WHEN 35 THEN 'Bruce' WHEN 36 THEN 'Dorian' WHEN 37 THEN 'Gregory' WHEN 38 THEN 'Pierce' WHEN 39 THEN 'Roy'
            WHEN 40 THEN 'Drew' WHEN 41 THEN 'Clay' WHEN 42 THEN 'Caiden' WHEN 43 THEN 'Enrique' WHEN 44 THEN 'Jamir'
            WHEN 45 THEN 'Leland' WHEN 46 THEN 'Mohamed' WHEN 47 THEN 'Alessandro' WHEN 48 THEN 'Deacon' WHEN 49 THEN 'Augustine'
        END
        WHEN @gender = 'Female' AND @IsCommonName = 1 THEN CASE @rand_first
            WHEN 0 THEN 'Mary' WHEN 1 THEN 'Patricia' WHEN 2 THEN 'Jennifer' WHEN 3 THEN 'Linda' WHEN 4 THEN 'Elizabeth'
            WHEN 5 THEN 'Barbara' WHEN 6 THEN 'Susan' WHEN 7 THEN 'Jessica' WHEN 8 THEN 'Sarah' WHEN 9 THEN 'Karen'
            WHEN 10 THEN 'Lisa' WHEN 11 THEN 'Nancy' WHEN 12 THEN 'Betty' WHEN 13 THEN 'Sandra' WHEN 14 THEN 'Margaret'
            WHEN 15 THEN 'Ashley' WHEN 16 THEN 'Kimberly' WHEN 17 THEN 'Emily' WHEN 18 THEN 'Donna' WHEN 19 THEN 'Michelle'
            WHEN 20 THEN 'Carol' WHEN 21 THEN 'Amanda' WHEN 22 THEN 'Melissa' WHEN 23 THEN 'Deborah' WHEN 24 THEN 'Stephanie'
            WHEN 25 THEN 'Dorothy' WHEN 26 THEN 'Rebecca' WHEN 27 THEN 'Sharon' WHEN 28 THEN 'Laura' WHEN 29 THEN 'Cynthia'
            WHEN 30 THEN 'Amy' WHEN 31 THEN 'Kathleen' WHEN 32 THEN 'Angela' WHEN 33 THEN 'Shirley' WHEN 34 THEN 'Brenda'
            WHEN 35 THEN 'Emma' WHEN 36 THEN 'Anna' WHEN 37 THEN 'Pamela' WHEN 38 THEN 'Nicole' WHEN 39 THEN 'Samantha'
            WHEN 40 THEN 'Katherine' WHEN 41 THEN 'Christine' WHEN 42 THEN 'Helen' WHEN 43 THEN 'Debra' WHEN 44 THEN 'Rachel'
            WHEN 45 THEN 'Carolyn' WHEN 46 THEN 'Janet' WHEN 47 THEN 'Maria' WHEN 48 THEN 'Catherine' WHEN 49 THEN 'Heather'
        END
        WHEN @gender = 'Female' AND @IsCommonName = 0 THEN CASE @rand_first
            WHEN 0 THEN 'April' WHEN 1 THEN 'Izabella' WHEN 2 THEN 'Hanna' WHEN 3 THEN 'Marceline' WHEN 4 THEN 'Alexis'
            WHEN 5 THEN 'Carter' WHEN 6 THEN 'Daniella' WHEN 7 THEN 'Marlee' WHEN 8 THEN 'Virginia' WHEN 9 THEN 'Kataleya'
            WHEN 10 THEN 'Halo' WHEN 11 THEN 'Nadia' WHEN 12 THEN 'Amiyah' WHEN 13 THEN 'Madelynn' WHEN 14 THEN 'Emerie'
            WHEN 15 THEN 'Renata' WHEN 16 THEN 'Oaklee' WHEN 17 THEN 'Remington' WHEN 18 THEN 'Maxine' WHEN 19 THEN 'Nellie'
            WHEN 20 THEN 'Briar' WHEN 21 THEN 'Danielle' WHEN 22 THEN 'Charli' WHEN 23 THEN 'Makenna' WHEN 24 THEN 'Imani'
            WHEN 25 THEN 'Armani' WHEN 26 THEN 'Edith' WHEN 27 THEN 'Nalani' WHEN 28 THEN 'Mae' WHEN 29 THEN 'Vienna'
            WHEN 30 THEN 'Hadassah' WHEN 31 THEN 'Stephanie' WHEN 32 THEN 'Ari' WHEN 33 THEN 'Kate' WHEN 34 THEN 'Jimena'
            WHEN 35 THEN 'Briana' WHEN 36 THEN 'Faye' WHEN 37 THEN 'Jordan' WHEN 38 THEN 'Louise' WHEN 39 THEN 'Amber'
            WHEN 40 THEN 'Makayla' WHEN 41 THEN 'Zahra' WHEN 42 THEN 'Lylah' WHEN 43 THEN 'Margo' WHEN 44 THEN 'Amoura'
            WHEN 45 THEN 'Jennifer' WHEN 46 THEN 'Kyla' WHEN 47 THEN 'Mylah' WHEN 48 THEN 'Winnie' WHEN 49 THEN 'Alisson'
        END
    END;
    DECLARE @last_name NVARCHAR(100) = CASE WHEN @IsCommonName = 1 THEN CASE @rand_last
            WHEN 0 THEN 'Smith' WHEN 1 THEN 'Johnson' WHEN 2 THEN 'Williams' WHEN 3 THEN 'Brown' WHEN 4 THEN 'Jones'
            WHEN 5 THEN 'Garcia' WHEN 6 THEN 'Miller' WHEN 7 THEN 'Davis' WHEN 8 THEN 'Rodriguez' WHEN 9 THEN 'Martinez'
            WHEN 10 THEN 'Hernandez' WHEN 11 THEN 'Lopez' WHEN 12 THEN 'Gonzalez' WHEN 13 THEN 'Wilson' WHEN 14 THEN 'Anderson'
            WHEN 15 THEN 'Thomas' WHEN 16 THEN 'Taylor' WHEN 17 THEN 'Moore' WHEN 18 THEN 'Jackson' WHEN 19 THEN 'Martin'
            WHEN 20 THEN 'Lee' WHEN 21 THEN 'Perez' WHEN 22 THEN 'Thompson' WHEN 23 THEN 'White' WHEN 24 THEN 'Harris'
            WHEN 25 THEN 'Sanchez' WHEN 26 THEN 'Clark' WHEN 27 THEN 'Ramirez' WHEN 28 THEN 'Lewis' WHEN 29 THEN 'Robinson'
            WHEN 30 THEN 'Walker' WHEN 31 THEN 'Young' WHEN 32 THEN 'Allen' WHEN 33 THEN 'King' WHEN 34 THEN 'Wright'
            WHEN 35 THEN 'Scott' WHEN 36 THEN 'Torres' WHEN 37 THEN 'Nguyen' WHEN 38 THEN 'Hill' WHEN 39 THEN 'Flores'
            WHEN 40 THEN 'Green' WHEN 41 THEN 'Adams' WHEN 42 THEN 'Nelson' WHEN 43 THEN 'Baker' WHEN 44 THEN 'Hall'
            WHEN 45 THEN 'Rivera' WHEN 46 THEN 'Campbell' WHEN 47 THEN 'Mitchell' WHEN 48 THEN 'Carter' WHEN 49 THEN 'Roberts'
        END ELSE CASE @rand_last
            WHEN 0 THEN 'Gomez' WHEN 1 THEN 'Phillips' WHEN 2 THEN 'Evans' WHEN 3 THEN 'Turner' WHEN 4 THEN 'Diaz'
            WHEN 5 THEN 'Parker' WHEN 6 THEN 'Cruz' WHEN 7 THEN 'Edwards' WHEN 8 THEN 'Collins' WHEN 9 THEN 'Reyes'
            WHEN 10 THEN 'Stewart' WHEN 11 THEN 'Morris' WHEN 12 THEN 'Morales' WHEN 13 THEN 'Murphy' WHEN 14 THEN 'Cook'
            WHEN 15 THEN 'Rogers' WHEN 16 THEN 'Gutierrez' WHEN 17 THEN 'Ortiz' WHEN 18 THEN 'Morgan' WHEN 19 THEN 'Cooper'
            WHEN 20 THEN 'Peterson' WHEN 21 THEN 'Bailey' WHEN 22 THEN 'Reed' WHEN 23 THEN 'Kelly' WHEN 24 THEN 'Howard'
            WHEN 25 THEN 'Ramos' WHEN 26 THEN 'Kim' WHEN 27 THEN 'Cox' WHEN 28 THEN 'Ward' WHEN 29 THEN 'Richardson'
            WHEN 30 THEN 'Watson' WHEN 31 THEN 'Brooks' WHEN 32 THEN 'Chavez' WHEN 33 THEN 'Wood' WHEN 34 THEN 'James'
            WHEN 35 THEN 'Bennett' WHEN 36 THEN 'Gray' WHEN 37 THEN 'Mendoza' WHEN 38 THEN 'Ruiz' WHEN 39 THEN 'Hughes'
            WHEN 40 THEN 'Price' WHEN 41 THEN 'Alvarez' WHEN 42 THEN 'Castillo' WHEN 43 THEN 'Sanders' WHEN 44 THEN 'Patel'
            WHEN 45 THEN 'Myers' WHEN 46 THEN 'Long' WHEN 47 THEN 'Ross' WHEN 48 THEN 'Foster' WHEN 49 THEN 'Jimenez'
        END
    END;
    INSERT INTO person (first_name, middle_initial, last_name, birthdate, gender, uniqueid)
    VALUES (
        @first_name,
        CASE WHEN ABS(CHECKSUM(NEWID())) % 2 = 0 THEN CHAR(65 + ABS(CHECKSUM(NEWID())) % 26) ELSE NULL END,
        @last_name,
        DATEADD(YEAR, -ABS(CHECKSUM(NEWID()) % 60), GETDATE()),
        @gender,
        NEWID()
    );
    SET @PersonCounter = @PersonCounter + 1;
END;
-- ADDRESS AND PERSON_ADDRESS INSERTS:
-- Prepare shuffled persons and assignments
DECLARE @shuffled_persons TABLE (rn BIGINT, person_id INT);
INSERT INTO @shuffled_persons (rn, person_id)
SELECT ROW_NUMBER() OVER (ORDER BY NEWID()), id FROM person;

DECLARE @assignments TABLE (person_id INT, addr_num INT, is_primary BIT);
INSERT INTO @assignments (person_id, addr_num, is_primary)
SELECT person_id, 1, 1 FROM @shuffled_persons WHERE rn <= 3333;

INSERT INTO @assignments (person_id, addr_num, is_primary)
SELECT person_id, 2, 0 FROM @shuffled_persons WHERE rn <= 1667;

-- Insert addresses and capture IDs using MERGE to allow outputting source columns
DECLARE @inserted TABLE (address_id INT, person_id INT);
MERGE INTO address AS target
USING (SELECT *, ABS(CHECKSUM(NEWID()) % 10) AS rand_cs FROM @assignments
) AS source
ON 1 = 0 -- Always insert, no matching
WHEN NOT MATCHED THEN
    INSERT (line_1, line_2, city, state_code, postal_code, is_primary)
    VALUES (
        CAST(ABS(CHECKSUM(NEWID()) % 9900) + 100 AS NVARCHAR(5)) + N' ' +
        CASE ABS(CHECKSUM(NEWID()) % 20)
            WHEN 0 THEN N'Main St'
            WHEN 1 THEN N'Maple Ave'
            WHEN 2 THEN N'Oak Blvd'
            WHEN 3 THEN N'Pine Rd'
            WHEN 4 THEN N'Birch Lane'
            WHEN 5 THEN N'Cedar Ct'
            WHEN 6 THEN N'Elm St'
            WHEN 7 THEN N'Walnut Dr'
            WHEN 8 THEN N'Chestnut Ave'
            WHEN 9 THEN N'Sycamore Rd'
            WHEN 10 THEN N'Hickory Ln'
            WHEN 11 THEN N'Poplar St'
            WHEN 12 THEN N'Willow Ave'
            WHEN 13 THEN N'Ash Blvd'
            WHEN 14 THEN N'Magnolia Dr'
            WHEN 15 THEN N'Dogwood Ct'
            WHEN 16 THEN N'Cherry Ln'
            WHEN 17 THEN N'Linden St'
            WHEN 18 THEN N'Banyan Rd'
            ELSE N'Spruce Ave'
        END,
        CASE WHEN ABS(CHECKSUM(NEWID()) % 2) = 0 THEN N'Apt ' + CAST(ABS(CHECKSUM(NEWID()) % 100) + 1 AS NVARCHAR(3)) ELSE NULL END,
        CASE source.rand_cs
            WHEN 0 THEN N'New York'
            WHEN 1 THEN N'Los Angeles'
            WHEN 2 THEN N'Chicago'
            WHEN 3 THEN N'Houston'
            WHEN 4 THEN N'Phoenix'
            WHEN 5 THEN N'Seattle'
            WHEN 6 THEN N'Denver'
            WHEN 7 THEN N'Boston'
            WHEN 8 THEN N'San Francisco'
            ELSE N'Miami'
        END,
        CASE source.rand_cs
            WHEN 0 THEN N'NY'
            WHEN 1 THEN N'CA'
            WHEN 2 THEN N'IL'
            WHEN 3 THEN N'TX'
            WHEN 4 THEN N'AZ'
            WHEN 5 THEN N'WA'
            WHEN 6 THEN N'CO'
            WHEN 7 THEN N'MA'
            WHEN 8 THEN N'CA'
            ELSE N'FL'
        END,
        CAST(10000 + (ABS(CHECKSUM(NEWID()) % 90000)) AS NVARCHAR(5)),
        source.is_primary
    )
OUTPUT inserted.id, source.person_id INTO @inserted;


-- Insert links
INSERT INTO person_address (person_id, address_id)
SELECT person_id, address_id FROM @inserted;